{"version":3,"file":"multi-describe-CAE9BKzz.js","sources":["../../../app/administration/src/component/multi-describe-card/multi-describe-card.html.twig","../../../app/administration/src/component/multi-describe-card/index.js","../../../app/administration/src/view/multi-describe-detail-tab/multi-describe-detail-tab.html.twig","../../../app/administration/src/view/multi-describe-detail-tab/index.js","../../../app/administration/src/module/sw-product/page/sw-product-detail/index.js"],"sourcesContent":["{% block multi_describe_card %}\r\n    <sw-card :title=\"$tc('multi-describe.card.title')\">\r\n        <div v-if=\"product && customFieldSet && salesChannels.length > 0\">\r\n            <sw-tabs position=\"left\">\r\n                <sw-tabs-item\r\n                    v-for=\"salesChannel in salesChannels\"\r\n                    :key=\"salesChannel.id\"\r\n                    :name=\"salesChannel.id\"\r\n                    :title=\"salesChannel.translated.name\">\r\n\r\n                    <div v-for=\"field in customFieldSet.customFields\" v-if=\"field.name.endsWith(salesChannel.id)\">\r\n                        <sw-field\r\n                            :key=\"field.name\"\r\n                            :label=\"field.config.label[$store.state.adminLocale.currentLocale]\"\r\n                            v-if=\"product.customFields\">\r\n                            <sw-text-editor\r\n                                v-model=\"product.customFields[field.name]\">\r\n                            </sw-text-editor>\r\n                        </sw-field>\r\n                    </div>\r\n\r\n                </sw-tabs-item>\r\n            </sw-tabs>\r\n        </div>\r\n        <sw-empty-state v-else :title=\"$tc('multi-describe.card.noData')\"></sw-empty-state>\r\n    </sw-card>\r\n{% endblock %}\r\n","import template from './multi-describe-card.html.twig';\r\nimport './multi-describe-card.scss';\r\n\r\nShopware.Component.register('multi-describe-card', {\r\n    template,\r\n\r\n    inject: ['repositoryFactory'],\r\n\r\n    props: {\r\n        product: {\r\n            type: Object,\r\n            required: true,\r\n        },\r\n        salesChannels: {\r\n            type: Array,\r\n            required: true,\r\n        }\r\n    },\r\n\r\n    computed: {\r\n        customFieldSetRepository() {\r\n            return this.repositoryFactory.create('custom_field_set');\r\n        },\r\n    },\r\n\r\n    data() {\r\n        return {\r\n            customFieldSet: null,\r\n        };\r\n    },\r\n\r\n    created() {\r\n        this.loadCustomFieldSet();\r\n    },\r\n\r\n    methods: {\r\n        loadCustomFieldSet() {\r\n            const criteria = new Shopware.Data.Criteria();\r\n            criteria.addFilter(Shopware.Data.Criteria.equals('name', 'multi_describe_set'));\r\n            criteria.addAssociation('customFields');\r\n\r\n            this.customFieldSetRepository.search(criteria, Shopware.Context.api).then(result => {\r\n                this.customFieldSet = result.first();\r\n            });\r\n        },\r\n\r\n        getFieldName(languageId, salesChannelId) {\r\n            // This logic needs to be more robust, matching the PHP service\r\n            return `description_${languageId}_${salesChannelId}`;\r\n        }\r\n    }\r\n});\r\n","{% block multi_describe_detail_tab %}\r\n    <multi-describe-card\r\n        :product=\"product\"\r\n        :salesChannels=\"salesChannels\">\r\n    </multi-describe-card>\r\n{% endblock %}\r\n","import template from './multi-describe-detail-tab.html.twig';\r\n\r\nShopware.Component.register('multi-describe-detail-tab', {\r\n    template,\r\n\r\n    inject: ['repositoryFactory'],\r\n\r\n    computed: {\r\n        salesChannelRepository() {\r\n            return this.repositoryFactory.create('sales_channel');\r\n        },\r\n    },\r\n\r\n    data() {\r\n        return {\r\n            salesChannels: [],\r\n        };\r\n    },\r\n\r\n    created() {\r\n        this.loadSalesChannels();\r\n    },\r\n\r\n    methods: {\r\n        loadSalesChannels() {\r\n            this.salesChannelRepository.search(new Shopware.Data.Criteria(), Shopware.Context.api).then(result => {\r\n                this.salesChannels = result;\r\n            });\r\n        }\r\n    }\r\n});\r\n","Shopware.Component.override('sw-product-detail', {\r\n    computed: {\r\n        productTabs() {\r\n            const tabs = this.$super('productTabs');\r\n            tabs.push({\r\n                name: 'multi-describe',\r\n                label: 'multi-describe.tabTitle',\r\n                component: 'multi-describe-detail-tab'\r\n            });\r\n            return tabs;\r\n        }\r\n    }\r\n});\r\n"],"names":["template$1","template","criteria","result","languageId","salesChannelId","tabs"],"mappings":"AAAA,MAAAA,EAAe,0wBCGf,SAAS,UAAU,SAAS,sBAAuB,CACnD,SAAIC,EAEA,OAAQ,CAAC,mBAAmB,EAE5B,MAAO,CACH,QAAS,CACL,KAAM,OACN,SAAU,EACtB,EACQ,cAAe,CACX,KAAM,MACN,SAAU,EACtB,CACA,EAEI,SAAU,CACN,0BAA2B,CACvB,OAAO,KAAK,kBAAkB,OAAO,kBAAkB,CACnE,CACA,EAEI,MAAO,CACH,MAAO,CACH,eAAgB,IAC5B,CACA,EAEI,SAAU,CACN,KAAK,mBAAkB,CAC/B,EAEI,QAAS,CACL,oBAAqB,CACjB,MAAMC,EAAW,IAAI,SAAS,KAAK,SACnCA,EAAS,UAAU,SAAS,KAAK,SAAS,OAAO,OAAQ,oBAAoB,CAAC,EAC9EA,EAAS,eAAe,cAAc,EAEtC,KAAK,yBAAyB,OAAOA,EAAU,SAAS,QAAQ,GAAG,EAAE,KAAKC,GAAU,CAChF,KAAK,eAAiBA,EAAO,OAC7C,CAAa,CACb,EAEQ,aAAaC,EAAYC,EAAgB,CAErC,MAAO,eAAeD,CAAU,IAAIC,CAAc,EAC9D,CACA,CACA,CAAC,ECnDD,MAAAJ,EAAe,sJCEf,SAAS,UAAU,SAAS,4BAA6B,CACrD,SAAAA,EAEA,OAAQ,CAAC,mBAAmB,EAE5B,SAAU,CACN,wBAAyB,CACrB,OAAO,KAAK,kBAAkB,OAAO,eAAe,CAChE,CACA,EAEI,MAAO,CACH,MAAO,CACH,cAAe,CAAA,CAC3B,CACA,EAEI,SAAU,CACN,KAAK,kBAAiB,CAC9B,EAEI,QAAS,CACL,mBAAoB,CAChB,KAAK,uBAAuB,OAAO,IAAI,SAAS,KAAK,SAAY,SAAS,QAAQ,GAAG,EAAE,KAAKE,GAAU,CAClG,KAAK,cAAgBA,CACrC,CAAa,CACb,CACA,CACA,CAAC,EC9BD,SAAS,UAAU,SAAS,oBAAqB,CAC7C,SAAU,CACN,aAAc,CACV,MAAMG,EAAO,KAAK,OAAO,aAAa,EACtC,OAAAA,EAAK,KAAK,CACN,KAAM,iBACN,MAAO,0BACP,UAAW,2BAC3B,CAAa,EACMA,CACnB,CACA,CACA,CAAC"}